{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","year","modal","handleChange","bind","assertThisInitialized","handleSubmit","handleClick","toggle","clearChild","setState","event","defineProperty","target","name","value","item","undefined","datum","id","state_pop","Population","state_name","Name","spec","concat","window","vegaEmbed","then","document","getElementById","scrollIntoView","behavior","node","firstChild","removeChild","result","view","addEventListener","_","catch","console","error","preventDefault","react_default","a","createElement","className","reactstrap_es","color","light","expand","href","navbar","onSubmit","onChange","type","onClick","outline","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.60b38375.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nimport {\n  Navbar,\n  NavbarBrand,\n  Nav,\n  NavItem,\n  Form,\n  Input,\n  Button\n} from \"reactstrap\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      year: 2010,\n      modal: false\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n    this.toggle = this.toggle.bind(this);\n    this.clearChild = this.clearChild.bind(this);\n  }\n\n  toggle() {\n    this.setState({\n      modal: !this.state.modal\n    });\n  }\n\n  handleChange(event) {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  }\n\n  handleClick(item) {\n    if (item.datum === undefined) {\n      this.clearChild();\n      return;\n    }\n\n    const state = item.datum.id;\n    const state_pop = item.datum.Population;\n    const state_name = item.datum.Name;\n\n    const spec = `/api/bar/${this.state.year}/${state}`;\n\n    this.setState(\n      {\n        modal: true,\n        state_pop: state_pop,\n        state_name: state_name\n      },\n      () => {\n        window.vegaEmbed(\"#charts\", spec).then(() => {\n          const element = document.getElementById(\"charts\");\n          element.scrollIntoView({ behavior: \"smooth\" });\n        });\n      }\n    );\n  }\n\n  clearChild() {\n    this.setState({\n      state_pop: null,\n      state_name: null\n    });\n    const node = document.getElementById(\"charts\");\n    while (node.firstChild) node.removeChild(node.firstChild);\n  }\n\n  handleSubmit(event) {\n    this.clearChild();\n\n    const spec = `/api/map/${this.state.year}`;\n\n    const handleClick = this.handleClick;\n\n    window\n      .vegaEmbed(\"#map\", spec)\n      .then(result => {\n        const view = result.view;\n        view.addEventListener(\"click\", function(_, item) {\n          handleClick(item);\n        });\n      })\n      .catch(console.error);\n    event.preventDefault();\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Navbar color=\"light\" light expand=\"md\">\n          <NavbarBrand href=\"/\">US Census</NavbarBrand>\n          <Nav className=\"ml-auto\" navbar>\n            <NavItem>\n              <Form onSubmit={this.handleSubmit}>\n                <Input\n                  value={this.state.year}\n                  onChange={this.handleChange}\n                  type=\"select\"\n                  name=\"year\"\n                >\n                  <option value=\"2010\">2010</option>\n                  <option value=\"2011\">2011</option>\n                  <option value=\"2012\">2012</option>\n                  <option value=\"2013\">2013</option>\n                  <option value=\"2014\">2014</option>\n                  <option value=\"2015\">2015</option>\n                  <option value=\"2016\">2016</option>\n                  <option value=\"2017\">2017</option>\n                </Input>\n              </Form>\n            </NavItem>\n            <NavItem>\n              <Button onClick={this.handleSubmit} outline color=\"success\">\n                Submit\n              </Button>\n            </NavItem>\n          </Nav>\n        </Navbar>\n        <div id=\"map\" />\n        <div id=\"charts\" />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}